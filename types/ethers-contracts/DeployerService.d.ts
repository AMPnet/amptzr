/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DeployerServiceInterface extends ethers.utils.Interface {
  functions: {
    "deployAssetCampaign()": FunctionFragment;
    "deployCampaign()": FunctionFragment;
    "deployIssuerAssetCampaign(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployAssetCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployIssuerAssetCampaign",
    values: [
      {
        issuerFactory: string;
        assetFactory: string;
        cfManagerSoftcapFactory: string;
        issuerOwner: string;
        issuerStablecoin: string;
        issuerWalletApprover: string;
        issuerInfo: string;
        assetOwner: string;
        assetInitialTokenSupply: BigNumberish;
        assetWhitelistRequired: boolean;
        assetName: string;
        assetSymbol: string;
        assetInfo: string;
        cfManagerOwner: string;
        cfManagerPricePerToken: BigNumberish;
        cfManagerSoftcap: BigNumberish;
        cfManagerTokensToSellAmount: BigNumberish;
        cfManagerWhitelistRequired: boolean;
        cfManagerInfo: string;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployAssetCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployIssuerAssetCampaign",
    data: BytesLike
  ): Result;

  events: {};
}

export class DeployerService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DeployerServiceInterface;

  functions: {
    deployAssetCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployIssuerAssetCampaign(
      request: {
        issuerFactory: string;
        assetFactory: string;
        cfManagerSoftcapFactory: string;
        issuerOwner: string;
        issuerStablecoin: string;
        issuerWalletApprover: string;
        issuerInfo: string;
        assetOwner: string;
        assetInitialTokenSupply: BigNumberish;
        assetWhitelistRequired: boolean;
        assetName: string;
        assetSymbol: string;
        assetInfo: string;
        cfManagerOwner: string;
        cfManagerPricePerToken: BigNumberish;
        cfManagerSoftcap: BigNumberish;
        cfManagerTokensToSellAmount: BigNumberish;
        cfManagerWhitelistRequired: boolean;
        cfManagerInfo: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deployAssetCampaign(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployCampaign(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployIssuerAssetCampaign(
    request: {
      issuerFactory: string;
      assetFactory: string;
      cfManagerSoftcapFactory: string;
      issuerOwner: string;
      issuerStablecoin: string;
      issuerWalletApprover: string;
      issuerInfo: string;
      assetOwner: string;
      assetInitialTokenSupply: BigNumberish;
      assetWhitelistRequired: boolean;
      assetName: string;
      assetSymbol: string;
      assetInfo: string;
      cfManagerOwner: string;
      cfManagerPricePerToken: BigNumberish;
      cfManagerSoftcap: BigNumberish;
      cfManagerTokensToSellAmount: BigNumberish;
      cfManagerWhitelistRequired: boolean;
      cfManagerInfo: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployAssetCampaign(overrides?: CallOverrides): Promise<void>;

    deployCampaign(overrides?: CallOverrides): Promise<void>;

    deployIssuerAssetCampaign(
      request: {
        issuerFactory: string;
        assetFactory: string;
        cfManagerSoftcapFactory: string;
        issuerOwner: string;
        issuerStablecoin: string;
        issuerWalletApprover: string;
        issuerInfo: string;
        assetOwner: string;
        assetInitialTokenSupply: BigNumberish;
        assetWhitelistRequired: boolean;
        assetName: string;
        assetSymbol: string;
        assetInfo: string;
        cfManagerOwner: string;
        cfManagerPricePerToken: BigNumberish;
        cfManagerSoftcap: BigNumberish;
        cfManagerTokensToSellAmount: BigNumberish;
        cfManagerWhitelistRequired: boolean;
        cfManagerInfo: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deployAssetCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployIssuerAssetCampaign(
      request: {
        issuerFactory: string;
        assetFactory: string;
        cfManagerSoftcapFactory: string;
        issuerOwner: string;
        issuerStablecoin: string;
        issuerWalletApprover: string;
        issuerInfo: string;
        assetOwner: string;
        assetInitialTokenSupply: BigNumberish;
        assetWhitelistRequired: boolean;
        assetName: string;
        assetSymbol: string;
        assetInfo: string;
        cfManagerOwner: string;
        cfManagerPricePerToken: BigNumberish;
        cfManagerSoftcap: BigNumberish;
        cfManagerTokensToSellAmount: BigNumberish;
        cfManagerWhitelistRequired: boolean;
        cfManagerInfo: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployAssetCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployIssuerAssetCampaign(
      request: {
        issuerFactory: string;
        assetFactory: string;
        cfManagerSoftcapFactory: string;
        issuerOwner: string;
        issuerStablecoin: string;
        issuerWalletApprover: string;
        issuerInfo: string;
        assetOwner: string;
        assetInitialTokenSupply: BigNumberish;
        assetWhitelistRequired: boolean;
        assetName: string;
        assetSymbol: string;
        assetInfo: string;
        cfManagerOwner: string;
        cfManagerPricePerToken: BigNumberish;
        cfManagerSoftcap: BigNumberish;
        cfManagerTokensToSellAmount: BigNumberish;
        cfManagerWhitelistRequired: boolean;
        cfManagerInfo: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
