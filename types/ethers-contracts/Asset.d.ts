/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AssetInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveCampaign(address)": FunctionFragment;
    "approvedCampaigns(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "changeOwnership(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getCampaignRecords()": FunctionFragment;
    "getDecimals()": FunctionFragment;
    "getInfoHistory()": FunctionFragment;
    "getState()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "setInfo(string)": FunctionFragment;
    "setIssuerStatus(bool)": FunctionFragment;
    "setWhitelistRequiredForTransfer(bool)": FunctionFragment;
    "snapshot()": FunctionFragment;
    "suspendCampaign(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveCampaign",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedCampaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInfoHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "setInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIssuerStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistRequiredForTransfer",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "snapshot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "suspendCampaign",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInfoHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIssuerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistRequiredForTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suspendCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CampaignWhitelist(address,address,bool,uint256)": EventFragment;
    "ChangeOwnership(address,address,uint256)": EventFragment;
    "SetApprovedByIssuer(address,bool,uint256)": EventFragment;
    "SetInfo(string,address,uint256)": EventFragment;
    "SetIssuerStatus(address,bool,uint256)": EventFragment;
    "SetWhitelistRequiredForTransfer(address,bool,uint256)": EventFragment;
    "Snapshot(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApprovedByIssuer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIssuerStatus"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetWhitelistRequiredForTransfer"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Snapshot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Asset extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AssetInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveCampaign(
      campaign: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { wallet: string; whitelisted: boolean }>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCampaignRecords(
      overrides?: CallOverrides
    ): Promise<
      [([string, boolean] & { wallet: string; whitelisted: boolean })[]]
    >;

    getDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInfoHistory(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { info: string; timestamp: BigNumber })[]]
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          string,
          string,
          string,
          string
        ] & {
          id: BigNumber;
          owner: string;
          mirroredToken: string;
          initialTokenSupply: BigNumber;
          whitelistRequiredForTransfer: boolean;
          assetApprovedByIssuer: boolean;
          issuer: string;
          info: string;
          name: string;
          symbol: string;
        }
      ]
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIssuerStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistRequiredForTransfer(
      whitelistRequiredForTransfer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    suspendCampaign(
      campaign: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveCampaign(
    campaign: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedCampaigns(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { wallet: string; whitelisted: boolean }>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAt(
    account: string,
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCampaignRecords(
    overrides?: CallOverrides
  ): Promise<([string, boolean] & { wallet: string; whitelisted: boolean })[]>;

  getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  getInfoHistory(
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { info: string; timestamp: BigNumber })[]>;

  getState(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      string,
      string,
      string,
      string
    ] & {
      id: BigNumber;
      owner: string;
      mirroredToken: string;
      initialTokenSupply: BigNumber;
      whitelistRequiredForTransfer: boolean;
      assetApprovedByIssuer: boolean;
      issuer: string;
      info: string;
      name: string;
      symbol: string;
    }
  >;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  setInfo(
    info: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIssuerStatus(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistRequiredForTransfer(
    whitelistRequiredForTransfer: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snapshot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  suspendCampaign(
    campaign: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveCampaign(campaign: string, overrides?: CallOverrides): Promise<void>;

    approvedCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { wallet: string; whitelisted: boolean }>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCampaignRecords(
      overrides?: CallOverrides
    ): Promise<
      ([string, boolean] & { wallet: string; whitelisted: boolean })[]
    >;

    getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getInfoHistory(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { info: string; timestamp: BigNumber })[]
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        string,
        string,
        string,
        string
      ] & {
        id: BigNumber;
        owner: string;
        mirroredToken: string;
        initialTokenSupply: BigNumber;
        whitelistRequiredForTransfer: boolean;
        assetApprovedByIssuer: boolean;
        issuer: string;
        info: string;
        name: string;
        symbol: string;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    setInfo(info: string, overrides?: CallOverrides): Promise<void>;

    setIssuerStatus(status: boolean, overrides?: CallOverrides): Promise<void>;

    setWhitelistRequiredForTransfer(
      whitelistRequiredForTransfer: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshot(overrides?: CallOverrides): Promise<BigNumber>;

    suspendCampaign(campaign: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    CampaignWhitelist(
      approver?: null,
      wallet?: null,
      whitelisted?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber],
      {
        approver: string;
        wallet: string;
        whitelisted: boolean;
        timestamp: BigNumber;
      }
    >;

    ChangeOwnership(
      caller?: null,
      newOwner?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; newOwner: string; timestamp: BigNumber }
    >;

    SetApprovedByIssuer(
      caller?: null,
      approvedByIssuer?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      { caller: string; approvedByIssuer: boolean; timestamp: BigNumber }
    >;

    SetInfo(
      info?: null,
      setter?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { info: string; setter: string; timestamp: BigNumber }
    >;

    SetIssuerStatus(
      approver?: null,
      status?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      { approver: string; status: boolean; timestamp: BigNumber }
    >;

    SetWhitelistRequiredForTransfer(
      caller?: null,
      whitelistRequiredForTransfer?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      {
        caller: string;
        whitelistRequiredForTransfer: boolean;
        timestamp: BigNumber;
      }
    >;

    Snapshot(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveCampaign(
      campaign: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCampaignRecords(overrides?: CallOverrides): Promise<BigNumber>;

    getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getInfoHistory(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIssuerStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistRequiredForTransfer(
      whitelistRequiredForTransfer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    suspendCampaign(
      campaign: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveCampaign(
      campaign: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCampaignRecords(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInfoHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIssuerStatus(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistRequiredForTransfer(
      whitelistRequiredForTransfer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    suspendCampaign(
      campaign: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
