/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CfManagerSoftcapInterface extends ethers.utils.Interface {
  functions: {
    "cancelCampaign()": FunctionFragment;
    "cancelInvestment()": FunctionFragment;
    "changeOwnership(address)": FunctionFragment;
    "claim(address)": FunctionFragment;
    "claims(address)": FunctionFragment;
    "finalize()": FunctionFragment;
    "getInfoHistory()": FunctionFragment;
    "getState()": FunctionFragment;
    "invest(uint256)": FunctionFragment;
    "investments(address)": FunctionFragment;
    "setInfo(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelInvestment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(functionFragment: "claims", values: [string]): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInfoHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "investments", values: [string]): string;
  encodeFunctionData(functionFragment: "setInfo", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInfoHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;

  events: {
    "CancelCampaign(address,uint256,uint256)": EventFragment;
    "CancelInvestment(address,uint256,uint256,uint256)": EventFragment;
    "ChangeOwnership(address,address,uint256)": EventFragment;
    "Claim(address,uint256,uint256,uint256)": EventFragment;
    "Finalize(address,uint256,uint256,uint256)": EventFragment;
    "Invest(address,uint256,uint256,uint256)": EventFragment;
    "SetInfo(string,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelInvestment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInfo"): EventFragment;
}

export class CfManagerSoftcap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CfManagerSoftcapInterface;

  functions: {
    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelInvestment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claims(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInfoHistory(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { info: string; timestamp: BigNumber })[]]
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          id: BigNumber;
          contractAddress: string;
          createdBy: string;
          owner: string;
          asset: string;
          issuer: string;
          tokenPrice: BigNumber;
          softCap: BigNumber;
          minInvestment: BigNumber;
          maxInvestment: BigNumber;
          whitelistRequired: boolean;
          finalized: boolean;
          cancelled: boolean;
          totalClaimableTokens: BigNumber;
          totalInvestorsCount: BigNumber;
          totalClaimsCount: BigNumber;
          totalFundsRaised: BigNumber;
          info: string;
        }
      ]
    >;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investments(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelCampaign(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelInvestment(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    investor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  finalize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInfoHistory(
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { info: string; timestamp: BigNumber })[]>;

  getState(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      contractAddress: string;
      createdBy: string;
      owner: string;
      asset: string;
      issuer: string;
      tokenPrice: BigNumber;
      softCap: BigNumber;
      minInvestment: BigNumber;
      maxInvestment: BigNumber;
      whitelistRequired: boolean;
      finalized: boolean;
      cancelled: boolean;
      totalClaimableTokens: BigNumber;
      totalInvestorsCount: BigNumber;
      totalClaimsCount: BigNumber;
      totalFundsRaised: BigNumber;
      info: string;
    }
  >;

  invest(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setInfo(
    info: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelCampaign(overrides?: CallOverrides): Promise<void>;

    cancelInvestment(overrides?: CallOverrides): Promise<void>;

    changeOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    claim(investor: string, overrides?: CallOverrides): Promise<void>;

    claims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalize(overrides?: CallOverrides): Promise<void>;

    getInfoHistory(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { info: string; timestamp: BigNumber })[]
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        contractAddress: string;
        createdBy: string;
        owner: string;
        asset: string;
        issuer: string;
        tokenPrice: BigNumber;
        softCap: BigNumber;
        minInvestment: BigNumber;
        maxInvestment: BigNumber;
        whitelistRequired: boolean;
        finalized: boolean;
        cancelled: boolean;
        totalClaimableTokens: BigNumber;
        totalInvestorsCount: BigNumber;
        totalClaimsCount: BigNumber;
        totalFundsRaised: BigNumber;
        info: string;
      }
    >;

    invest(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    investments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setInfo(info: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    CancelCampaign(
      owner?: string | null,
      tokensReturned?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; tokensReturned: BigNumber; timestamp: BigNumber }
    >;

    CancelInvestment(
      investor?: string | null,
      tokenAmount?: null,
      tokenValue?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        investor: string;
        tokenAmount: BigNumber;
        tokenValue: BigNumber;
        timestamp: BigNumber;
      }
    >;

    ChangeOwnership(
      caller?: null,
      newOwner?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; newOwner: string; timestamp: BigNumber }
    >;

    Claim(
      investor?: string | null,
      tokenAmount?: null,
      tokenValue?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        investor: string;
        tokenAmount: BigNumber;
        tokenValue: BigNumber;
        timestamp: BigNumber;
      }
    >;

    Finalize(
      owner?: string | null,
      totalFundsRaised?: null,
      totalTokensSold?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        totalFundsRaised: BigNumber;
        totalTokensSold: BigNumber;
        timestamp: BigNumber;
      }
    >;

    Invest(
      investor?: string | null,
      tokenAmount?: null,
      tokenValue?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        investor: string;
        tokenAmount: BigNumber;
        tokenValue: BigNumber;
        timestamp: BigNumber;
      }
    >;

    SetInfo(
      info?: null,
      setter?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { info: string; setter: string; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelInvestment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInfoHistory(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelInvestment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInfoHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invest(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
