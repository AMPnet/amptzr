/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IssuerInterface extends ethers.utils.Interface {
  functions: {
    "approveWallet(address)": FunctionFragment;
    "approvedWallets(address)": FunctionFragment;
    "assets(uint256)": FunctionFragment;
    "cfManagers(uint256)": FunctionFragment;
    "createAsset(uint256,uint256,uint8,string,string)": FunctionFragment;
    "createCrowdfundingCampaign(uint256,uint256,string,string,uint256,uint256,uint256)": FunctionFragment;
    "getAssets()": FunctionFragment;
    "getCfManagers()": FunctionFragment;
    "info()": FunctionFragment;
    "isWalletApproved(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "setInfo(string)": FunctionFragment;
    "stablecoin()": FunctionFragment;
    "suspendWallet(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedWallets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cfManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAsset",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCrowdfundingCampaign",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "getAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCfManagers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isWalletApproved",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "setInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "suspendWallet",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cfManagers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCrowdfundingCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCfManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWalletApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suspendWallet",
    data: BytesLike
  ): Result;

  events: {};
}

export class Issuer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IssuerInterface;

  functions: {
    approveWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    cfManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createAsset(
      _categoryId: BigNumberish,
      _totalShares: BigNumberish,
      _state: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCrowdfundingCampaign(
      _categoryId: BigNumberish,
      _totalShares: BigNumberish,
      _name: string,
      _symbol: string,
      _minInvestment: BigNumberish,
      _maxInvestment: BigNumberish,
      _endsAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssets(overrides?: CallOverrides): Promise<[string[]]>;

    getCfManagers(overrides?: CallOverrides): Promise<[string[]]>;

    info(overrides?: CallOverrides): Promise<[string]>;

    isWalletApproved(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setInfo(
      _info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<[string]>;

    suspendWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveWallet(
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedWallets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  cfManagers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createAsset(
    _categoryId: BigNumberish,
    _totalShares: BigNumberish,
    _state: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCrowdfundingCampaign(
    _categoryId: BigNumberish,
    _totalShares: BigNumberish,
    _name: string,
    _symbol: string,
    _minInvestment: BigNumberish,
    _maxInvestment: BigNumberish,
    _endsAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssets(overrides?: CallOverrides): Promise<string[]>;

  getCfManagers(overrides?: CallOverrides): Promise<string[]>;

  info(overrides?: CallOverrides): Promise<string>;

  isWalletApproved(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setInfo(
    _info: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stablecoin(overrides?: CallOverrides): Promise<string>;

  suspendWallet(
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveWallet(_wallet: string, overrides?: CallOverrides): Promise<void>;

    approvedWallets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    cfManagers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    createAsset(
      _categoryId: BigNumberish,
      _totalShares: BigNumberish,
      _state: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createCrowdfundingCampaign(
      _categoryId: BigNumberish,
      _totalShares: BigNumberish,
      _name: string,
      _symbol: string,
      _minInvestment: BigNumberish,
      _maxInvestment: BigNumberish,
      _endsAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssets(overrides?: CallOverrides): Promise<string[]>;

    getCfManagers(overrides?: CallOverrides): Promise<string[]>;

    info(overrides?: CallOverrides): Promise<string>;

    isWalletApproved(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setInfo(_info: string, overrides?: CallOverrides): Promise<void>;

    stablecoin(overrides?: CallOverrides): Promise<string>;

    suspendWallet(_wallet: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cfManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAsset(
      _categoryId: BigNumberish,
      _totalShares: BigNumberish,
      _state: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCrowdfundingCampaign(
      _categoryId: BigNumberish,
      _totalShares: BigNumberish,
      _name: string,
      _symbol: string,
      _minInvestment: BigNumberish,
      _maxInvestment: BigNumberish,
      _endsAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getCfManagers(overrides?: CallOverrides): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    isWalletApproved(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setInfo(
      _info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stablecoin(overrides?: CallOverrides): Promise<BigNumber>;

    suspendWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cfManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAsset(
      _categoryId: BigNumberish,
      _totalShares: BigNumberish,
      _state: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCrowdfundingCampaign(
      _categoryId: BigNumberish,
      _totalShares: BigNumberish,
      _name: string,
      _symbol: string,
      _minInvestment: BigNumberish,
      _maxInvestment: BigNumberish,
      _endsAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCfManagers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWalletApproved(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInfo(
      _info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suspendWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
