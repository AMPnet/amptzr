/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IssuerInterface extends ethers.utils.Interface {
  functions: {
    "approveWallet(address)": FunctionFragment;
    "approvedWalletsMap(address)": FunctionFragment;
    "changeOwnership(address)": FunctionFragment;
    "changeWalletApprover(address)": FunctionFragment;
    "getInfoHistory()": FunctionFragment;
    "getState()": FunctionFragment;
    "getWalletRecords()": FunctionFragment;
    "isWalletApproved(address)": FunctionFragment;
    "setInfo(string)": FunctionFragment;
    "suspendWallet(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedWalletsMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWalletApprover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInfoHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWalletRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletApproved",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "suspendWallet",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedWalletsMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWalletApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInfoHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWalletRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suspendWallet",
    data: BytesLike
  ): Result;

  events: {
    "ChangeOwnership(address,address,uint256)": EventFragment;
    "ChangeWalletApprover(address,address,address,uint256)": EventFragment;
    "SetInfo(string,address,uint256)": EventFragment;
    "WalletWhitelist(address,address,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeWalletApprover"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletWhitelist"): EventFragment;
}

export class Issuer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IssuerInterface;

  functions: {
    approveWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedWalletsMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeWalletApprover(
      newWalletApprover: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInfoHistory(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { info: string; timestamp: BigNumber })[]]
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, string, string, string, string] & {
          id: BigNumber;
          contractAddress: string;
          createdBy: string;
          owner: string;
          stablecoin: string;
          walletApprover: string;
          info: string;
        }
      ]
    >;

    getWalletRecords(
      overrides?: CallOverrides
    ): Promise<
      [([string, boolean] & { wallet: string; whitelisted: boolean })[]]
    >;

    isWalletApproved(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    suspendWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveWallet(
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedWalletsMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeWalletApprover(
    newWalletApprover: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInfoHistory(
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { info: string; timestamp: BigNumber })[]>;

  getState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string, string, string] & {
      id: BigNumber;
      contractAddress: string;
      createdBy: string;
      owner: string;
      stablecoin: string;
      walletApprover: string;
      info: string;
    }
  >;

  getWalletRecords(
    overrides?: CallOverrides
  ): Promise<([string, boolean] & { wallet: string; whitelisted: boolean })[]>;

  isWalletApproved(wallet: string, overrides?: CallOverrides): Promise<boolean>;

  setInfo(
    info: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  suspendWallet(
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveWallet(wallet: string, overrides?: CallOverrides): Promise<void>;

    approvedWalletsMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    changeWalletApprover(
      newWalletApprover: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getInfoHistory(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { info: string; timestamp: BigNumber })[]
    >;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, string, string] & {
        id: BigNumber;
        contractAddress: string;
        createdBy: string;
        owner: string;
        stablecoin: string;
        walletApprover: string;
        info: string;
      }
    >;

    getWalletRecords(
      overrides?: CallOverrides
    ): Promise<
      ([string, boolean] & { wallet: string; whitelisted: boolean })[]
    >;

    isWalletApproved(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setInfo(info: string, overrides?: CallOverrides): Promise<void>;

    suspendWallet(wallet: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ChangeOwnership(
      caller?: null,
      newOwner?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; newOwner: string; timestamp: BigNumber }
    >;

    ChangeWalletApprover(
      caller?: null,
      oldWalletApprover?: null,
      newWalletApprover?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        caller: string;
        oldWalletApprover: string;
        newWalletApprover: string;
        timestamp: BigNumber;
      }
    >;

    SetInfo(
      info?: null,
      setter?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { info: string; setter: string; timestamp: BigNumber }
    >;

    WalletWhitelist(
      approver?: string | null,
      wallet?: null,
      whitelisted?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber],
      {
        approver: string;
        wallet: string;
        whitelisted: boolean;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    approveWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedWalletsMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeWalletApprover(
      newWalletApprover: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInfoHistory(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getWalletRecords(overrides?: CallOverrides): Promise<BigNumber>;

    isWalletApproved(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    suspendWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedWalletsMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeWalletApprover(
      newWalletApprover: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInfoHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWalletRecords(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWalletApproved(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInfo(
      info: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    suspendWallet(
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
