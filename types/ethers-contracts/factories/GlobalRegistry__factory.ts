/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GlobalRegistry,
  GlobalRegistryInterface,
} from "../GlobalRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_issuerFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_assetFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cfManagerFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_payoutManagerFactory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "assetFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "auditingProcedures",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cfManagerFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "issuerFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payoutManagerFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "categoryId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "ipfsHash",
        type: "string",
      },
    ],
    name: "setAuditingProcedure",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAssetFactory",
        type: "address",
      },
    ],
    name: "updateAssetFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newCfManagerFactory",
        type: "address",
      },
    ],
    name: "updateCfManagerFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newIssuerFactory",
        type: "address",
      },
    ],
    name: "updateIssuerFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newPayoutManagerFactory",
        type: "address",
      },
    ],
    name: "updatePayoutManagerFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200126438038062001264833981810160405281019062000037919062000214565b600062000049620001f560201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002ce565b600033905090565b6000815190506200020e81620002b4565b92915050565b600080600080608085870312156200022b57600080fd5b60006200023b87828801620001fd565b94505060206200024e87828801620001fd565b93505060406200026187828801620001fd565b92505060606200027487828801620001fd565b91505092959194509250565b60006200028d8262000294565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002bf8162000280565b8114620002cb57600080fd5b50565b610f8680620002de6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063ac1650471161008c578063c99efd5911610066578063c99efd59146101d8578063cbd2adfa146101f6578063e101035614610212578063f2fde38b14610230576100cf565b8063ac16504714610182578063b12826221461019e578063c3acb4d1146101ba576100cf565b80634481c09c146100d45780635faade8b146101045780636b094d1114610120578063715018a61461013c5780638da5cb5b146101465780639720983c14610164575b600080fd5b6100ee60048036038101906100e99190610b9e565b61024c565b6040516100fb9190610d24565b60405180910390f35b61011e60048036038101906101199190610b75565b6102ec565b005b61013a60048036038101906101359190610b75565b6103ac565b005b61014461046c565b005b61014e6105a6565b60405161015b9190610d09565b60405180910390f35b61016c6105cf565b6040516101799190610d09565b60405180910390f35b61019c60048036038101906101979190610b75565b6105f5565b005b6101b860048036038101906101b39190610bc7565b6106b5565b005b6101c261075d565b6040516101cf9190610d09565b60405180910390f35b6101e0610783565b6040516101ed9190610d09565b60405180910390f35b610210600480360381019061020b9190610b75565b6107a9565b005b61021a610869565b6040516102279190610d09565b60405180910390f35b61024a60048036038101906102459190610b75565b61088f565b005b6005602052806000526040600020600091509050805461026b90610e81565b80601f016020809104026020016040519081016040528092919081815260200182805461029790610e81565b80156102e45780601f106102b9576101008083540402835291602001916102e4565b820191906000526020600020905b8154815290600101906020018083116102c757829003601f168201915b505050505081565b6102f4610a38565b73ffffffffffffffffffffffffffffffffffffffff166103126105a6565b73ffffffffffffffffffffffffffffffffffffffff1614610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035f90610d66565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6103b4610a38565b73ffffffffffffffffffffffffffffffffffffffff166103d26105a6565b73ffffffffffffffffffffffffffffffffffffffff1614610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90610d66565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610474610a38565b73ffffffffffffffffffffffffffffffffffffffff166104926105a6565b73ffffffffffffffffffffffffffffffffffffffff16146104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df90610d66565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105fd610a38565b73ffffffffffffffffffffffffffffffffffffffff1661061b6105a6565b73ffffffffffffffffffffffffffffffffffffffff1614610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066890610d66565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6106bd610a38565b73ffffffffffffffffffffffffffffffffffffffff166106db6105a6565b73ffffffffffffffffffffffffffffffffffffffff1614610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890610d66565b60405180910390fd5b80600560008481526020019081526020016000209080519060200190610758929190610a40565b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107b1610a38565b73ffffffffffffffffffffffffffffffffffffffff166107cf6105a6565b73ffffffffffffffffffffffffffffffffffffffff1614610825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081c90610d66565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610897610a38565b73ffffffffffffffffffffffffffffffffffffffff166108b56105a6565b73ffffffffffffffffffffffffffffffffffffffff161461090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290610d66565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561097b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290610d46565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b828054610a4c90610e81565b90600052602060002090601f016020900481019282610a6e5760008555610ab5565b82601f10610a8757805160ff1916838001178555610ab5565b82800160010185558215610ab5579182015b82811115610ab4578251825591602001919060010190610a99565b5b509050610ac29190610ac6565b5090565b5b80821115610adf576000816000905550600101610ac7565b5090565b6000610af6610af184610db7565b610d86565b905082815260208101848484011115610b0e57600080fd5b610b19848285610e3f565b509392505050565b600081359050610b3081610f22565b92915050565b600082601f830112610b4757600080fd5b8135610b57848260208601610ae3565b91505092915050565b600081359050610b6f81610f39565b92915050565b600060208284031215610b8757600080fd5b6000610b9584828501610b21565b91505092915050565b600060208284031215610bb057600080fd5b6000610bbe84828501610b60565b91505092915050565b60008060408385031215610bda57600080fd5b6000610be885828601610b60565b925050602083013567ffffffffffffffff811115610c0557600080fd5b610c1185828601610b36565b9150509250929050565b610c2481610e03565b82525050565b6000610c3582610de7565b610c3f8185610df2565b9350610c4f818560208601610e4e565b610c5881610f11565b840191505092915050565b6000610c70602683610df2565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610cd6602083610df2565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000602082019050610d1e6000830184610c1b565b92915050565b60006020820190508181036000830152610d3e8184610c2a565b905092915050565b60006020820190508181036000830152610d5f81610c63565b9050919050565b60006020820190508181036000830152610d7f81610cc9565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715610dad57610dac610ee2565b5b8060405250919050565b600067ffffffffffffffff821115610dd257610dd1610ee2565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610e0e82610e15565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610e6c578082015181840152602081019050610e51565b83811115610e7b576000848401525b50505050565b60006002820490506001821680610e9957607f821691505b60208210811415610ead57610eac610eb3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610f2b81610e03565b8114610f3657600080fd5b50565b610f4281610e35565b8114610f4d57600080fd5b5056fea264697066735822122008b3db4443813f11d6d78363fdee3408a084261b7f520fe6d755a55fe5931f7b64736f6c63430008000033";

export class GlobalRegistry__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _issuerFactory: string,
    _assetFactory: string,
    _cfManagerFactory: string,
    _payoutManagerFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GlobalRegistry> {
    return super.deploy(
      _issuerFactory,
      _assetFactory,
      _cfManagerFactory,
      _payoutManagerFactory,
      overrides || {}
    ) as Promise<GlobalRegistry>;
  }
  getDeployTransaction(
    _issuerFactory: string,
    _assetFactory: string,
    _cfManagerFactory: string,
    _payoutManagerFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _issuerFactory,
      _assetFactory,
      _cfManagerFactory,
      _payoutManagerFactory,
      overrides || {}
    );
  }
  attach(address: string): GlobalRegistry {
    return super.attach(address) as GlobalRegistry;
  }
  connect(signer: Signer): GlobalRegistry__factory {
    return super.connect(signer) as GlobalRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GlobalRegistryInterface {
    return new utils.Interface(_abi) as GlobalRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GlobalRegistry {
    return new Contract(address, _abi, signerOrProvider) as GlobalRegistry;
  }
}
