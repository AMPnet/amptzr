/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IAsset, IAssetInterface } from "../IAsset";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "campaign",
        type: "address",
      },
    ],
    name: "approveCampaign",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "changeOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "campaign",
        type: "address",
      },
      {
        internalType: "address",
        name: "investor",
        type: "address",
      },
    ],
    name: "claimLiquidationShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "convertFromMirrored",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenValue",
        type: "uint256",
      },
    ],
    name: "finalizeSale",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCampaignRecords",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
          {
            internalType: "bool",
            name: "whitelisted",
            type: "bool",
          },
        ],
        internalType: "struct Structs.WalletRecord[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDecimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInfoHistory",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "info",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.InfoEntry[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSellHistory",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cfManager",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.TokenSaleInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getState",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "createdBy",
            type: "address",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "mirroredToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "initialTokenSupply",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "whitelistRequiredForTransfer",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "assetApprovedByIssuer",
            type: "bool",
          },
          {
            internalType: "address",
            name: "issuer",
            type: "address",
          },
          {
            internalType: "string",
            name: "info",
            type: "string",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "totalAmountRaised",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalTokensSold",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "liquidated",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "liquidationTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationSnapshotId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidationFundsClaimed",
            type: "uint256",
          },
        ],
        internalType: "struct Structs.AssetState",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "info",
        type: "string",
      },
    ],
    name: "setInfo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setIssuerStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "setMirroredToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "whitelistRequiredForTransfer",
        type: "bool",
      },
    ],
    name: "setWhitelistRequiredForTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "snapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "campaign",
        type: "address",
      },
    ],
    name: "suspendCampaign",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IAsset__factory {
  static readonly abi = _abi;
  static createInterface(): IAssetInterface {
    return new utils.Interface(_abi) as IAssetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IAsset {
    return new Contract(address, _abi, signerOrProvider) as IAsset;
  }
}
