/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WalletApproverServiceInterface extends ethers.utils.Interface {
  functions: {
    "allowedApprovers(address)": FunctionFragment;
    "approveWallet(address,address)": FunctionFragment;
    "approveWallets(address,address[])": FunctionFragment;
    "masterOwner()": FunctionFragment;
    "release()": FunctionFragment;
    "rewardPerApprove()": FunctionFragment;
    "suspendWallet(address,address)": FunctionFragment;
    "suspendWallets(address,address[])": FunctionFragment;
    "transferMasterOwnerRights(address)": FunctionFragment;
    "updateApproverStatus(address,bool)": FunctionFragment;
    "updateRewardAmount(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowedApprovers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWallet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWallets",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "masterOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPerApprove",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "suspendWallet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendWallets",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMasterOwnerRights",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateApproverStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedApprovers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMasterOwnerRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApproverStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardAmount",
    data: BytesLike
  ): Result;

  events: {
    "ApproveWallet(address,address,uint256)": EventFragment;
    "Received(address,uint256,uint256)": EventFragment;
    "Released(address,uint256,uint256)": EventFragment;
    "SuspendWallet(address,address,uint256)": EventFragment;
    "TransferMasterOwnerRights(address,address,uint256)": EventFragment;
    "UpdateApproverStatus(address,address,bool,uint256)": EventFragment;
    "UpdateRewardAmount(address,uint256,uint256,uint256)": EventFragment;
    "WalletFunded(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuspendWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferMasterOwnerRights"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateApproverStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletFunded"): EventFragment;
}

export class WalletApproverService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WalletApproverServiceInterface;

  functions: {
    allowedApprovers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approveWallet(
      issuer: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveWallets(
      issuer: string,
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    masterOwner(overrides?: CallOverrides): Promise<[string]>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerApprove(overrides?: CallOverrides): Promise<[BigNumber]>;

    suspendWallet(
      issuer: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    suspendWallets(
      issuer: string,
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferMasterOwnerRights(
      newMasterOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateApproverStatus(
      approver: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardAmount(
      newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowedApprovers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  approveWallet(
    issuer: string,
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveWallets(
    issuer: string,
    wallets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  masterOwner(overrides?: CallOverrides): Promise<string>;

  release(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerApprove(overrides?: CallOverrides): Promise<BigNumber>;

  suspendWallet(
    issuer: string,
    wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  suspendWallets(
    issuer: string,
    wallets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferMasterOwnerRights(
    newMasterOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateApproverStatus(
    approver: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardAmount(
    newRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowedApprovers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    approveWallet(
      issuer: string,
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveWallets(
      issuer: string,
      wallets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    masterOwner(overrides?: CallOverrides): Promise<string>;

    release(overrides?: CallOverrides): Promise<void>;

    rewardPerApprove(overrides?: CallOverrides): Promise<BigNumber>;

    suspendWallet(
      issuer: string,
      wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    suspendWallets(
      issuer: string,
      wallets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferMasterOwnerRights(
      newMasterOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateApproverStatus(
      approver: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardAmount(
      newRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ApproveWallet(
      caller?: string | null,
      wallet?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; wallet: string; timestamp: BigNumber }
    >;

    Received(
      sender?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; amount: BigNumber; timestamp: BigNumber }
    >;

    Released(
      receiver?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { receiver: string; amount: BigNumber; timestamp: BigNumber }
    >;

    SuspendWallet(
      caller?: string | null,
      wallet?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; wallet: string; timestamp: BigNumber }
    >;

    TransferMasterOwnerRights(
      caller?: string | null,
      newOwner?: string | null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; newOwner: string; timestamp: BigNumber }
    >;

    UpdateApproverStatus(
      caller?: string | null,
      approver?: string | null,
      approved?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber],
      {
        caller: string;
        approver: string;
        approved: boolean;
        timestamp: BigNumber;
      }
    >;

    UpdateRewardAmount(
      caller?: string | null,
      oldAmount?: null,
      newAmount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        caller: string;
        oldAmount: BigNumber;
        newAmount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    WalletFunded(
      caller?: string | null,
      wallet?: null,
      reward?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        caller: string;
        wallet: string;
        reward: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    allowedApprovers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveWallet(
      issuer: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveWallets(
      issuer: string,
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    masterOwner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerApprove(overrides?: CallOverrides): Promise<BigNumber>;

    suspendWallet(
      issuer: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    suspendWallets(
      issuer: string,
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferMasterOwnerRights(
      newMasterOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateApproverStatus(
      approver: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardAmount(
      newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedApprovers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveWallet(
      issuer: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveWallets(
      issuer: string,
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    masterOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerApprove(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suspendWallet(
      issuer: string,
      wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    suspendWallets(
      issuer: string,
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferMasterOwnerRights(
      newMasterOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateApproverStatus(
      approver: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardAmount(
      newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
